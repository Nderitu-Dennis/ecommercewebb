{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/material/snack-bar\";\nimport * as i4 from \"../../service/admin.service\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/material/button\";\nimport * as i7 from \"@angular/material/form-field\";\nimport * as i8 from \"@angular/material/input\";\nfunction PostCategoryComponent_mat_error_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" This input is required!\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction PostCategoryComponent_mat_error_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" This input is required!\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class PostCategoryComponent {\n  constructor(fb, router, snackBar, adminService) {\n    this.fb = fb;\n    this.router = router;\n    this.snackBar = snackBar;\n    this.adminService = adminService;\n  }\n  ngOnInit() {\n    this.categoryForm = this.fb.group({\n      name: [null, [Validators.required]],\n      description: [null, [Validators.required]] // Ensure description field is defined in the form\n    });\n  }\n  /*addCategory(): void {\n    if (this.categoryForm.valid) {\n      // Ensure that the description value is a string\n      const formData = this.categoryForm.value;\n      formData.description = String(formData.description); // Convert to string if needed\n         this.adminService.addCategory(formData).subscribe((res) => {\n        if (res.id != null) {\n          this.snackBar.open('Category Posted Successfully!', 'Close', {\n            duration: 5000\n          });\n          this.router.navigateByUrl('/admin/dashboard');\n        } else {\n          this.snackBar.open(res.message, 'Close', {\n            duration: 5000,\n            panelClass: 'error-snackbar'\n          });\n        }\n      });\n    } else {\n      this.categoryForm.markAllAsTouched();\n    }\n  }\n  }*/\n  addCategory() {\n    // Log the data before sending the request\n    console.log('Category Form Data:', this.categoryForm.value);\n    // Only if the category form is valid can other operations be performed\n    if (this.categoryForm.valid) {\n      this.adminService.addCategory(this.categoryForm.value).subscribe(res => {\n        if (res.id != null) {\n          this.snackBar.open('Category Posted Successfully!', 'Close', {\n            duration: 5000\n          });\n          this.router.navigateByUrl('/admin/dashboard');\n        } else {\n          this.snackBar.open(res.message, 'Close', {\n            duration: 5000,\n            panelClass: 'error-snackbar'\n          });\n        }\n      });\n    } else {\n      this.categoryForm.markAllAsTouched();\n    }\n  }\n  static #_ = this.ɵfac = function PostCategoryComponent_Factory(t) {\n    return new (t || PostCategoryComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.MatSnackBar), i0.ɵɵdirectiveInject(i4.AdminService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: PostCategoryComponent,\n    selectors: [[\"app-post-category\"]],\n    decls: 16,\n    vars: 3,\n    consts: [[1, \"container\"], [3, \"formGroup\", \"ngSubmit\"], [\"appearance\", \"outline\", 1, \"form-field\"], [\"matInput\", \"\", \"type\", \"text\", \"placeholder\", \"Name\", \"formControlName\", \"name\"], [4, \"ngIf\"], [\"matInput\", \"\", \"rows\", \"5\", \"placeholder\", \"Description\", \"formControlName\", \"description\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"type\", \"submit\"]],\n    template: function PostCategoryComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n        i0.ɵɵtext(2, \"Add Category\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"form\", 1);\n        i0.ɵɵlistener(\"ngSubmit\", function PostCategoryComponent_Template_form_ngSubmit_3_listener() {\n          return ctx.addCategory();\n        });\n        i0.ɵɵelementStart(4, \"mat-form-field\", 2)(5, \"mat-label\");\n        i0.ɵɵtext(6, \"Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(7, \"input\", 3);\n        i0.ɵɵtemplate(8, PostCategoryComponent_mat_error_8_Template, 2, 0, \"mat-error\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"mat-form-field\", 2)(10, \"mat-label\");\n        i0.ɵɵtext(11, \"Description\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(12, \"textarea\", 5);\n        i0.ɵɵtemplate(13, PostCategoryComponent_mat_error_13_Template, 2, 0, \"mat-error\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"button\", 6);\n        i0.ɵɵtext(15, \"Add Category\");\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        let tmp_1_0;\n        let tmp_2_0;\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"formGroup\", ctx.categoryForm);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", (tmp_1_0 = ctx.categoryForm.get(\"name\")) == null ? null : tmp_1_0.hasError(\"required\"));\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", (tmp_2_0 = ctx.categoryForm.get(\"description\")) == null ? null : tmp_2_0.hasError(\"required\"));\n      }\n    },\n    dependencies: [i5.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i6.MatButton, i7.MatFormField, i7.MatLabel, i7.MatError, i8.MatInput],\n    styles: [\".container[_ngcontent-%COMP%] {\\n  max-width: 600px;\\n  margin: 0 auto;\\n  padding: 20px;\\n  margin-top: 90px;\\n}\\n.container[_ngcontent-%COMP%]   h2[_ngcontent-%COMP%] {\\n  text-align: center;\\n  margin-bottom: 20px;\\n  color: #3f51b5;\\n}\\n.container[_ngcontent-%COMP%]   form[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n}\\n.container[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]   mat-form-field[_ngcontent-%COMP%] {\\n  margin-bottom: 20px;\\n}\\n.container[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]   mat-form-field[_ngcontent-%COMP%]   .mat-form-field-wrapper[_ngcontent-%COMP%] {\\n  border-radius: 4px;\\n  border: 1px solid #ccc;\\n}\\n.container[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]   mat-form-field[_ngcontent-%COMP%]   .mat-form-field-outline[_ngcontent-%COMP%] {\\n  border-width: 1px;\\n}\\n.container[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]   mat-form-field[_ngcontent-%COMP%]   .mat-input-element[_ngcontent-%COMP%] {\\n  color: #3f51b5;\\n}\\n.container[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\\n  align-self: center;\\n}\\n\\n@media (max-width: 600px) { \\n  .container[_ngcontent-%COMP%] {\\n    padding: 10px;\\n  }\\n  .container[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]   .mat-form-field[_ngcontent-%COMP%] {\\n    margin-bottom: 10px;\\n  }\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvYWRtaW4vY29tcG9uZW50cy9wb3N0LWNhdGVnb3J5L3Bvc3QtY2F0ZWdvcnkuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxnQkFBQTtFQUNBLGNBQUE7RUFDQSxhQUFBO0VBQ0EsZ0JBQUE7QUFDSjtBQUNJO0VBQ0ksa0JBQUE7RUFDQSxtQkFBQTtFQUNBLGNBQUE7QUFDUjtBQUVJO0VBQ0ksYUFBQTtFQUNBLHNCQUFBO0FBQVI7QUFFUTtFQUNJLG1CQUFBO0FBQVo7QUFFWTtFQUNJLGtCQUFBO0VBQ0Esc0JBQUE7QUFBaEI7QUFHWTtFQUNJLGlCQUFBO0FBRGhCO0FBSVk7RUFDSSxjQUFBO0FBRmhCO0FBTVE7RUFDSSxrQkFBQTtBQUpaOztBQVNBLDRCQUFBLHFCQUFBO0VBQ0k7SUFDSSxhQUFBO0VBTk47RUFTVTtJQUNJLG1CQUFBO0VBUGQ7QUFDRiIsInNvdXJjZXNDb250ZW50IjpbIi5jb250YWluZXIge1xuICAgIG1heC13aWR0aDogNjAwcHg7XG4gICAgbWFyZ2luOiAwIGF1dG87XG4gICAgcGFkZGluZzogMjBweDtcbiAgICBtYXJnaW4tdG9wOiA5MHB4O1xuXG4gICAgaDJ7XG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMjBweDtcbiAgICAgICAgY29sb3I6IzNmNTFiNTtcbiAgICB9XG5cbiAgICBmb3Jte1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuXG4gICAgICAgIG1hdC1mb3JtLWZpZWxkIHtcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDIwcHg7XG5cbiAgICAgICAgICAgIC5tYXQtZm9ybS1maWVsZC13cmFwcGVye1xuICAgICAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgICAgICAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjY2NjO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAubWF0LWZvcm0tZmllbGQtb3V0bGluZXtcbiAgICAgICAgICAgICAgICBib3JkZXItd2lkdGg6MXB4O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAubWF0LWlucHV0LWVsZW1lbnR7XG4gICAgICAgICAgICAgICAgY29sb3I6IzNmNTFiNTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGJ1dHRvbntcbiAgICAgICAgICAgIGFsaWduLXNlbGY6IGNlbnRlcjtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuQG1lZGlhIChtYXgtd2lkdGg6NjAwcHgpeyAgIC8qIHJlc2VhcmNoIG9uIHRoaXMgKi9cbiAgICAuY29udGFpbmVye1xuICAgICAgICBwYWRkaW5nOiAxMHB4O1xuXG4gICAgICAgIGZvcm17XG4gICAgICAgICAgICAubWF0LWZvcm0tZmllbGQge1xuICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":"AACA,SAAiCA,UAAU,QAAQ,gBAAgB;;;;;;;;;;;;ICMvDC,iCAAkE;IAACA,wCAAuB;IAAAA,iBAAY;;;;;IAOtGA,iCAAyE;IAACA,wCAAuB;IAAAA,iBAAY;;;ADHzH,OAAM,MAAOC,qBAAqB;EAGhCC,YACUC,EAAe,EACfC,MAAc,EACdC,QAAqB,EACrBC,YAA0B;IAH1B,OAAE,GAAFH,EAAE;IACF,WAAM,GAANC,MAAM;IACN,aAAQ,GAARC,QAAQ;IACR,iBAAY,GAAZC,YAAY;EACnB;EAEHC,QAAQ;IACN,IAAI,CAACC,YAAY,GAAG,IAAI,CAACL,EAAE,CAACM,KAAK,CAAC;MAChCC,IAAI,EAAE,CAAC,IAAI,EAAE,CAACX,UAAU,CAACY,QAAQ,CAAC,CAAC;MACnCC,WAAW,EAAE,CAAC,IAAI,EAAE,CAACb,UAAU,CAACY,QAAQ,CAAC,CAAC,CAAE;KAC7C,CAAC;EACJ;EAEA;;;;;;;;;;;;;;;;;;;;;;;EAyBFE,WAAW;IACT;IACAC,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAE,IAAI,CAACP,YAAY,CAACQ,KAAK,CAAC;IAE3D;IACA,IAAG,IAAI,CAACR,YAAY,CAACS,KAAK,EAAC;MACzB,IAAI,CAACX,YAAY,CAACO,WAAW,CAAC,IAAI,CAACL,YAAY,CAACQ,KAAK,CAAC,CAACE,SAAS,CAAEC,GAAG,IAAI;QACvE,IAAGA,GAAG,CAACC,EAAE,IAAI,IAAI,EAAE;UACjB,IAAI,CAACf,QAAQ,CAACgB,IAAI,CAAC,+BAA+B,EAAE,OAAO,EAAC;YAC1DC,QAAQ,EAAE;WACX,CAAC;UACF,IAAI,CAAClB,MAAM,CAACmB,aAAa,CAAC,kBAAkB,CAAC;SAC9C,MACG;UACF,IAAI,CAAClB,QAAQ,CAACgB,IAAI,CAACF,GAAG,CAACK,OAAO,EAAE,OAAO,EAAE;YACvCF,QAAQ,EAAE,IAAI;YACdG,UAAU,EAAE;WACb,CAAC;;MAEN,CAAC,CAAC;KACH,MAAM;MACL,IAAI,CAACjB,YAAY,CAACkB,gBAAgB,EAAE;;EAExC;EAAC;qBAjEYzB,qBAAqB;EAAA;EAAA;UAArBA,qBAAqB;IAAA0B;IAAAC;IAAAC;IAAAC;IAAAC;MAAA;QCXlC/B,8BAAuB;QACfA,4BAAY;QAAAA,iBAAK;QACrBA,+BAA4D;QAA3BA;UAAA,OAAYgC,iBAAa;QAAA,EAAC;QAEvDhC,yCAAwD;QACzCA,oBAAI;QAAAA,iBAAY;QAC3BA,2BAAuE;QACvEA,kFAAsG;QAC1GA,iBAAiB;QAGjBA,yCAAwD;QACzCA,4BAAW;QAAAA,iBAAY;QAClCA,+BAA+F;QAC/FA,oFAA6G;QACjHA,iBAAiB;QAEjBA,kCAAwD;QAAAA,6BAAY;QAAAA,iBAAS;;;;;QAf3EA,eAA0B;QAA1BA,4CAA0B;QAKZA,eAAoD;QAApDA,6GAAoD;QAOpDA,eAA2D;QAA3DA,oHAA2D","names":["Validators","i0","PostCategoryComponent","constructor","fb","router","snackBar","adminService","ngOnInit","categoryForm","group","name","required","description","addCategory","console","log","value","valid","subscribe","res","id","open","duration","navigateByUrl","message","panelClass","markAllAsTouched","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/home/denniskali/Desktop/ecommercewebb/src/app/admin/components/post-category/post-category.component.ts","/home/denniskali/Desktop/ecommercewebb/src/app/admin/components/post-category/post-category.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { AdminService } from '../../service/admin.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-post-category',\n  templateUrl: './post-category.component.html',\n  styleUrls: ['./post-category.component.scss']\n})\nexport class PostCategoryComponent implements OnInit {\n  categoryForm: FormGroup;\n\n  constructor(\n    private fb: FormBuilder,\n    private router: Router,\n    private snackBar: MatSnackBar,\n    private adminService: AdminService\n  ) {}\n\n  ngOnInit(): void {\n    this.categoryForm = this.fb.group({\n      name: [null, [Validators.required]],\n      description: [null, [Validators.required]], // Ensure description field is defined in the form\n    });\n  }\n\n  /*addCategory(): void {\n    if (this.categoryForm.valid) {\n      // Ensure that the description value is a string\n      const formData = this.categoryForm.value;\n      formData.description = String(formData.description); // Convert to string if needed\n\n      this.adminService.addCategory(formData).subscribe((res) => {\n        if (res.id != null) {\n          this.snackBar.open('Category Posted Successfully!', 'Close', {\n            duration: 5000\n          });\n          this.router.navigateByUrl('/admin/dashboard');\n        } else {\n          this.snackBar.open(res.message, 'Close', {\n            duration: 5000,\n            panelClass: 'error-snackbar'\n          });\n        }\n      });\n    } else {\n      this.categoryForm.markAllAsTouched();\n    }\n  }\n}*/\n\naddCategory(): void {\n  // Log the data before sending the request\n  console.log('Category Form Data:', this.categoryForm.value);\n\n  // Only if the category form is valid can other operations be performed\n  if(this.categoryForm.valid){\n    this.adminService.addCategory(this.categoryForm.value).subscribe((res) =>{\n      if(res.id != null) {\n        this.snackBar.open('Category Posted Successfully!', 'Close',{\n          duration: 5000\n        });\n        this.router.navigateByUrl('/admin/dashboard');\n      }\n      else{\n        this.snackBar.open(res.message, 'Close', {\n          duration: 5000,\n          panelClass: 'error-snackbar'\n        });\n      }\n    });\n  } else {\n    this.categoryForm.markAllAsTouched();\n  }\n}\n}\n\n","<div class=\"container\">\n    <h2>Add Category</h2>\n    <form [formGroup]=\"categoryForm\" (ngSubmit)=\"addCategory()\">\n\n        <mat-form-field appearance=\"outline\" class=\"form-field\">\n            <mat-label>Name</mat-label>\n            <input matInput type=\"text\" placeholder=\"Name\" formControlName=\"name\"/>\n            <mat-error *ngIf=\"categoryForm.get('name')?.hasError('required')\"> This input is required!</mat-error>                      \n        </mat-form-field>\n\n\n        <mat-form-field appearance=\"outline\" class=\"form-field\">\n            <mat-label>Description</mat-label>\n            <textarea matInput rows=\"5\" placeholder=\"Description\" formControlName=\"description\"></textarea>\n            <mat-error *ngIf=\"categoryForm.get('description')?.hasError('required')\"> This input is required!</mat-error>                      \n        </mat-form-field>\n\n        <button mat-raised-button color=\"primary\" type=\"submit\">Add Category</button>\n    </form>\n</div>\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}