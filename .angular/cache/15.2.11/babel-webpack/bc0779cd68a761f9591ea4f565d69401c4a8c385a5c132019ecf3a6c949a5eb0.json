{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./storage/userstorage.service\";\nconst BASIC_URL = \"http://localhost:8080/\";\nexport class AuthService {\n  constructor(http, userStorageService) {\n    this.http = http;\n    this.userStorageService = userStorageService;\n  }\n  register(signupRequest) {\n    return this.http.post(BASIC_URL + \"sign-up\", signupRequest);\n  }\n  login(username, password) {\n    const headers = new HttpHeaders().set('Content-Type', 'application/json');\n    const body = {\n      username,\n      password\n    };\n    return this.http.post(BASIC_URL + 'authenticate', body, {\n      headers,\n      observe: 'response'\n    }).pipe(map(res => {\n      const token = res.headers.get('authorization').substring(7); //get token without the starting string \"bearer\"\n      const user = res.body;\n      if (token && user) {\n        this.userStorageService.saveToken(token);\n        this.userStorageService.saveUser(user);\n        return true;\n      }\n      return false; //if token & user dont exist return false\n    }));\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.UserstorageService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;AAE9D,SAAqBC,GAAG,QAAQ,MAAM;;;;AAGtC,MAAMC,SAAS,GAAG,wBAAwB;AAM1C,OAAM,MAAOC,WAAW;EAEtBC,YAAqBC,IAAgB,EAC3BC,kBAAsC;IAD3B,SAAI,GAAJD,IAAI;IACf,uBAAkB,GAAlBC,kBAAkB;EAAwB;EAEpDC,QAAQ,CAACC,aAAiB;IACxB,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAACP,SAAS,GAAG,SAAS,EAAEM,aAAa,CAAC;EAE7D;EAEAE,KAAK,CAACC,QAAgB,EAAEC,QAAe;IACrC,MAAMC,OAAO,GAAC,IAAIb,WAAW,EAAE,CAACc,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC;IACvE,MAAMC,IAAI,GAAE;MAACJ,QAAQ;MAAEC;IAAQ,CAAC;IAEhC,OAAO,IAAI,CAACP,IAAI,CAACI,IAAI,CAACP,SAAS,GAAG,cAAc,EAAEa,IAAI,EAAE;MAACF,OAAO;MAAEG,OAAO,EAAE;IAAU,CAAC,CAAC,CAACC,IAAI,CAC1FhB,GAAG,CAAEiB,GAAG,IAAI;MACV,MAAMC,KAAK,GAACD,GAAG,CAACL,OAAO,CAACO,GAAG,CAAC,eAAe,CAAC,CAACC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;MAC3D,MAAMC,IAAI,GAACJ,GAAG,CAACH,IAAI;MACnB,IAAGI,KAAK,IAAIG,IAAI,EAAC;QACf,IAAI,CAAChB,kBAAkB,CAACiB,SAAS,CAACJ,KAAK,CAAC;QACxC,IAAI,CAACb,kBAAkB,CAACkB,QAAQ,CAACF,IAAI,CAAC;QACtC,OAAO,IAAI;;MAIb,OAAO,KAAK,CAAC,CAAE;IACjB,CAAC,CAAC,CACH;EAEH;EAAC;qBA7BUnB,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAAsB,SAAXtB,WAAW;IAAAuB,YAFV;EAAM","names":["HttpHeaders","map","BASIC_URL","AuthService","constructor","http","userStorageService","register","signupRequest","post","login","username","password","headers","set","body","observe","pipe","res","token","get","substring","user","saveToken","saveUser","factory","providedIn"],"sourceRoot":"","sources":["/home/denniskali/Desktop/ecommercewebb/src/app/services/auth/auth.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, map } from 'rxjs';\nimport { UserstorageService } from './storage/userstorage.service';\n\nconst BASIC_URL = \"http://localhost:8080/\";\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  constructor( private http: HttpClient,\n    private userStorageService: UserstorageService) { }\n\n  register(signupRequest:any): Observable<any> {\n    return this.http.post(BASIC_URL + \"sign-up\", signupRequest)\n\n  }\n\n  login(username: string, password:string): any {\n    const headers=new HttpHeaders().set('Content-Type', 'application/json');\n    const body= {username, password};\n\n    return this.http.post(BASIC_URL + 'authenticate', body, {headers, observe: 'response'}).pipe(\n      map((res) =>{\n        const token=res.headers.get('authorization').substring(7); //get token without the starting string \"bearer\"\n        const user=res.body;\n        if(token && user){\n          this.userStorageService.saveToken(token);\n          this.userStorageService.saveUser(user);\n          return true;\n\n\n        }\n        return false;  //if token & user dont exist return false\n      })\n    )\n\n  }\n\n\n}\n   "]},"metadata":{},"sourceType":"module","externalDependencies":[]}