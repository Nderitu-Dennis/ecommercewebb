{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { catchError, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/services/auth/storage/userstorage.service\";\nconst BASIC_URL = \"http://localhost:8080\";\nexport class AdminService {\n  constructor(http, userStorageService) {\n    this.http = http;\n    this.userStorageService = userStorageService;\n  } //injecting the HTTP client\n  addCategory(categoryDto) {\n    return this.http.post(BASIC_URL + '/api/admin/categories', categoryDto, {\n      headers: this.createAuthorizationHeader()\n    });\n  }\n  getAllCategories() {\n    return this.http.get(BASIC_URL + '/api/admin/categories', {\n      headers: this.createAuthorizationHeader()\n    }).pipe(catchError(error => {\n      console.error('Error fetching categories:', error);\n      return throwError('Something went wrong while fetching categories. Please try again later.');\n    }));\n  }\n  //API to post the product\n  addProduct(productDto) {\n    return this.http.post(BASIC_URL + '/api/admin/product', productDto, {\n      headers: this.createAuthorizationHeader()\n    });\n  }\n  //updating product details\n  updateProduct(productId, productDto) {\n    return this.http.put(BASIC_URL + `/api/admin/product/${productId}`, productDto, {\n      headers: this.createAuthorizationHeader()\n    });\n  }\n  //all products\n  getAllProducts() {\n    return this.http.get(BASIC_URL + '/api/admin/products', {\n      headers: this.createAuthorizationHeader()\n    });\n  }\n  getProductById(productId) {\n    return this.http.get(BASIC_URL + `/api/admin/product/${productId}`, {\n      headers: this.createAuthorizationHeader()\n    });\n  }\n  getAllProductsByName(name) {\n    return this.http.get(BASIC_URL + `/api/admin/search/${name}`, {\n      headers: this.createAuthorizationHeader()\n    });\n  }\n  //calling the deleteProduct API from the back end\n  deleteProduct(productId) {\n    return this.http.delete(BASIC_URL + `/api/admin/product/${productId}`, {\n      headers: this.createAuthorizationHeader()\n    });\n  }\n  //API to create a coupon\n  addCoupon(couponDto) {\n    return this.http.post(BASIC_URL + '/api/admin/coupons', couponDto, {\n      headers: this.createAuthorizationHeader()\n    });\n  }\n  getCoupons() {\n    return this.http.get(BASIC_URL + '/api/admin/coupons', {\n      headers: this.createAuthorizationHeader()\n    });\n  }\n  getPlacedOrders() {\n    return this.http.get(BASIC_URL + '/api/admin/placedOrders', {\n      headers: this.createAuthorizationHeader()\n    });\n  }\n  changeOrderStatus(orderId, status) {\n    return this.http.get(BASIC_URL + `/api/admin/order/${orderId}/${status}`, {\n      headers: this.createAuthorizationHeader()\n    });\n  }\n  postFAQ(productId, faqDto) {\n    return this.http.post(BASIC_URL + `/api/admin/faq/${productId}`, faqDto, {\n      headers: this.createAuthorizationHeader()\n    });\n  }\n  createAuthorizationHeader() {\n    const token = this.userStorageService.getToken();\n    // Check if token exists\n    if (token) {\n      return new HttpHeaders().set('Authorization', `Bearer ${token}`);\n    } else {\n      // Handle case where token is missing\n      console.error(\"Token is missing. Unable to create authorization header.\");\n      return new HttpHeaders();\n    }\n  }\n  static #_ = this.ɵfac = function AdminService_Factory(t) {\n    return new (t || AdminService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.UserstorageService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AdminService,\n    factory: AdminService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;AAE9D,SAAqBC,UAAU,EAAEC,UAAU,QAAQ,MAAM;;;;AAGzD,MAAMC,SAAS,GAAG,uBAAuB;AAKzC,OAAM,MAAOC,YAAY;EAEvBC,YAAoBC,IAAgB,EAC1BC,kBAAsC;IAD5B,SAAI,GAAJD,IAAI;IACd,uBAAkB,GAAlBC,kBAAkB;EAAwB,CAAC,CAAG;EAExDC,WAAW,CAACC,WAAe;IACzB,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAACP,SAAS,GAAG,uBAAuB,EAAGM,WAAW,EAAC;MACtEE,OAAO,EAAE,IAAI,CAACC,yBAAyB;KACxC,CAAC;EACJ;EAEAC,gBAAgB;IACd,OAAO,IAAI,CAACP,IAAI,CAACQ,GAAG,CAACX,SAAS,GAAG,uBAAuB,EAAE;MACxDQ,OAAO,EAAE,IAAI,CAACC,yBAAyB;KACxC,CAAC,CAACG,IAAI,CACLd,UAAU,CAAEe,KAAU,IAAI;MACxBC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD,OAAOd,UAAU,CAAC,yEAAyE,CAAC;IAC9F,CAAC,CAAC,CACH;EACH;EAGA;EAEAgB,UAAU,CAACC,UAAc;IACvB,OAAO,IAAI,CAACb,IAAI,CAACI,IAAI,CAACP,SAAS,GAAG,oBAAoB,EAAEgB,UAAU,EAAC;MACjER,OAAO,EAAE,IAAI,CAACC,yBAAyB;KACxC,CAAC;EACJ;EAEA;EAEAQ,aAAa,CAACC,SAAa,EAAEF,UAAc;IACzC,OAAO,IAAI,CAACb,IAAI,CAACgB,GAAG,CAACnB,SAAS,GAAG,sBAAsBkB,SAAS,EAAE,EAAEF,UAAU,EAAC;MAC7ER,OAAO,EAAE,IAAI,CAACC,yBAAyB;KACxC,CAAC;EACJ;EAEE;EACFW,cAAc;IACZ,OAAO,IAAI,CAACjB,IAAI,CAACQ,GAAG,CAACX,SAAS,GAAG,qBAAqB,EAAC;MACrDQ,OAAO,EAAE,IAAI,CAACC,yBAAyB;KACxC,CAAC;EACJ;EAEAY,cAAc,CAACH,SAAS;IACtB,OAAO,IAAI,CAACf,IAAI,CAACQ,GAAG,CAACX,SAAS,GAAG,sBAAsBkB,SAAS,EAAE,EAAC;MACjEV,OAAO,EAAE,IAAI,CAACC,yBAAyB;KACxC,CAAC;EACJ;EAGAa,oBAAoB,CAACC,IAAQ;IAC3B,OAAO,IAAI,CAACpB,IAAI,CAACQ,GAAG,CAACX,SAAS,GAAG,qBAAqBuB,IAAI,EAAE,EAAC;MAC3Df,OAAO,EAAE,IAAI,CAACC,yBAAyB;KACxC,CAAC;EACJ;EAEA;EACAe,aAAa,CAACN,SAAc;IAC1B,OAAO,IAAI,CAACf,IAAI,CAACsB,MAAM,CAACzB,SAAS,GAAG,sBAAsBkB,SAAS,EAAE,EAAC;MACtEV,OAAO,EAAE,IAAI,CAACC,yBAAyB;KACtC,CAAC;EAEJ;EAEA;EAEAiB,SAAS,CAACC,SAAa;IACrB,OAAO,IAAI,CAACxB,IAAI,CAACI,IAAI,CAACP,SAAS,GAAG,oBAAoB,EAAE2B,SAAS,EAAC;MAChEnB,OAAO,EAAE,IAAI,CAACC,yBAAyB;KACxC,CAAC;EACJ;EAEAmB,UAAU;IACR,OAAO,IAAI,CAACzB,IAAI,CAACQ,GAAG,CAACX,SAAS,GAAG,oBAAoB,EAAE;MACrDQ,OAAO,EAAE,IAAI,CAACC,yBAAyB;KACxC,CAAC;EACJ;EAEAoB,eAAe;IACb,OAAO,IAAI,CAAC1B,IAAI,CAACQ,GAAG,CAACX,SAAS,GAAG,yBAAyB,EAAE;MAC1DQ,OAAO,EAAE,IAAI,CAACC,yBAAyB;KACxC,CAAC;EACJ;EAEAqB,iBAAiB,CAACC,OAAe,EAAEC,MAAa;IAC9C,OAAO,IAAI,CAAC7B,IAAI,CAACQ,GAAG,CAACX,SAAS,GAAG,oBAAoB+B,OAAO,IAAIC,MAAM,EAAE,EAAE;MACxExB,OAAO,EAAE,IAAI,CAACC,yBAAyB;KACxC,CAAC;EACJ;EAEAwB,OAAO,CAACf,SAAiB,EAAEgB,MAAU;IACnC,OAAO,IAAI,CAAC/B,IAAI,CAACI,IAAI,CAACP,SAAS,GAAG,kBAAkBkB,SAAS,EAAE,EAAEgB,MAAM,EAAE;MACvE1B,OAAO,EAAE,IAAI,CAACC,yBAAyB;KACxC,CAAC;EACJ;EAGQA,yBAAyB;IAC/B,MAAM0B,KAAK,GAAE,IAAI,CAAC/B,kBAAkB,CAACgC,QAAQ,EAAE;IAE/C;IACA,IAAID,KAAK,EAAE;MACT,OAAO,IAAItC,WAAW,EAAE,CAACwC,GAAG,CAAC,eAAe,EAAE,UAAUF,KAAK,EAAE,CAAC;KACjE,MAAM;MACL;MACArB,OAAO,CAACD,KAAK,CAAC,0DAA0D,CAAC;MACzE,OAAO,IAAIhB,WAAW,EAAE;;EAE5B;EAAC;qBA/GUI,YAAY;EAAA;EAAA;WAAZA,YAAY;IAAAqC,SAAZrC,YAAY;IAAAsC,YAFX;EAAM","names":["HttpHeaders","catchError","throwError","BASIC_URL","AdminService","constructor","http","userStorageService","addCategory","categoryDto","post","headers","createAuthorizationHeader","getAllCategories","get","pipe","error","console","addProduct","productDto","updateProduct","productId","put","getAllProducts","getProductById","getAllProductsByName","name","deleteProduct","delete","addCoupon","couponDto","getCoupons","getPlacedOrders","changeOrderStatus","orderId","status","postFAQ","faqDto","token","getToken","set","factory","providedIn"],"sourceRoot":"","sources":["/home/denniskali/Desktop/ecommercewebb/src/app/admin/service/admin.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, catchError, throwError } from 'rxjs';\nimport { UserstorageService } from 'src/app/services/auth/storage/userstorage.service';\n\nconst BASIC_URL = \"http://localhost:8080\"; \n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AdminService {  \n\n  constructor(private http: HttpClient,\n    private userStorageService: UserstorageService) { }   //injecting the HTTP client\n\n  addCategory(categoryDto:any): Observable<any>{\n    return this.http.post(BASIC_URL + '/api/admin/categories',  categoryDto,{\n      headers: this.createAuthorizationHeader(),\n    })\n  } \n\n  getAllCategories(): Observable<any> {\n    return this.http.get(BASIC_URL + '/api/admin/categories', {\n      headers: this.createAuthorizationHeader(),\n    }).pipe(\n      catchError((error: any) => {\n        console.error('Error fetching categories:', error);\n        return throwError('Something went wrong while fetching categories. Please try again later.');\n      })\n    );\n  }\n  \n\n  //API to post the product\n\n  addProduct(productDto:any): Observable<any>{\n    return this.http.post(BASIC_URL + '/api/admin/product', productDto,{\n      headers: this.createAuthorizationHeader(),\n    })\n  }\n\n  //updating product details\n\n  updateProduct(productId:any, productDto:any): Observable<any>{\n    return this.http.put(BASIC_URL + `/api/admin/product/${productId}`, productDto,{\n      headers: this.createAuthorizationHeader(),\n    })\n  }\n\n    //all products\n  getAllProducts():  Observable<any>{\n    return this.http.get(BASIC_URL + '/api/admin/products',{\n      headers: this.createAuthorizationHeader(),\n    })\n  }\n\n  getProductById(productId):  Observable<any>{\n    return this.http.get(BASIC_URL + `/api/admin/product/${productId}`,{\n      headers: this.createAuthorizationHeader(),\n    })\n  }\n\n \n  getAllProductsByName(name:any):  Observable<any>{\n    return this.http.get(BASIC_URL + `/api/admin/search/${name}`,{\n      headers: this.createAuthorizationHeader(),\n    })\n  }\n\n  //calling the deleteProduct API from the back end\n  deleteProduct(productId: any): Observable<any> {\n    return this.http.delete(BASIC_URL + `/api/admin/product/${productId}`,{\n    headers: this.createAuthorizationHeader(),\n    })\n\n  }\n\n  //API to create a coupon\n\n  addCoupon(couponDto:any): Observable<any>{\n    return this.http.post(BASIC_URL + '/api/admin/coupons', couponDto,{\n      headers: this.createAuthorizationHeader(),\n    })\n  }\n\n  getCoupons(): Observable<any>{\n    return this.http.get(BASIC_URL + '/api/admin/coupons', {\n      headers: this.createAuthorizationHeader(),\n    })\n  }\n\n  getPlacedOrders(): Observable<any>{\n    return this.http.get(BASIC_URL + '/api/admin/placedOrders', {\n      headers: this.createAuthorizationHeader(),\n    })\n  }\n\n  changeOrderStatus(orderId: number, status:string): Observable<any>{\n    return this.http.get(BASIC_URL + `/api/admin/order/${orderId}/${status}`, {\n      headers: this.createAuthorizationHeader(),\n    })\n  }\n\n  postFAQ(productId: number, faqDto:any): Observable<any>{\n    return this.http.post(BASIC_URL + `/api/admin/faq/${productId}`, faqDto, {\n      headers: this.createAuthorizationHeader(),\n    })\n  }\n  \n\n  private createAuthorizationHeader(): HttpHeaders {\n    const token =this.userStorageService.getToken();\n  \n    // Check if token exists\n    if (token) {\n      return new HttpHeaders().set('Authorization', `Bearer ${token}`);\n    } else {\n      // Handle case where token is missing\n      console.error(\"Token is missing. Unable to create authorization header.\");\n      return new HttpHeaders();\n    }\n  }\n\n\n\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}