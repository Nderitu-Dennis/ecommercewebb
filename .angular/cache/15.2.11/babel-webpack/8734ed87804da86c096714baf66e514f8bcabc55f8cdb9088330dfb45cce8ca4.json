{"ast":null,"code":"import * as i0 from \"@angular/core\";\nconst TOKEN = 'ecom-token';\nconst USER = 'ecom-user';\nexport class UserstorageService {\n  constructor() {}\n  saveToken(token) {\n    window.localStorage.removeItem(TOKEN); //remove the existing token if there is in local storage\n    window.localStorage.setItem(TOKEN, token);\n  }\n  saveUser(user) {\n    window.localStorage.removeItem(USER); //remove existing user if they exist\n    window.localStorage.setItem(USER, JSON.stringify(user)); //convert to a string rep that can easily be stored/transmitted over a network\n  }\n\n  getToken() {\n    return localStorage.getItem(TOKEN); //method to get token from local storage and return as string\n  }\n  //method to get the user\n  static getUser() {\n    return JSON.parse(localStorage.getItem(USER));\n  }\n  //method to get the user id\n  static getUserId() {\n    const user = this.getUser();\n    if (user == null) {\n      return '';\n    }\n    return user.userId;\n  }\n  //method to get the user role\n  static getUserRole() {\n    const user = this.getUser();\n    if (user == null) {\n      return '';\n    }\n    return user.role;\n  }\n  //check if logged in user is admin \n  static isAdminLoggedIn() {\n    if (this.getToken === null) {\n      return false;\n    }\n    const role = this.getUserRole();\n    return role == 'ADMIN';\n  }\n  //check if logged in user is customer\n  static isCustomerLoggedIn() {\n    if (this.getToken === null) {\n      return false;\n    }\n    const role = this.getUserRole();\n    return role == 'CUSTOMER';\n  }\n  //signout method\n  static signOut() {\n    window.localStorage.removeItem(TOKEN);\n    window.localStorage.removeItem(USER);\n  }\n  static #_ = this.ɵfac = function UserstorageService_Factory(t) {\n    return new (t || UserstorageService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserstorageService,\n    factory: UserstorageService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":";AAEA,MAAMA,KAAK,GAAG,YAAY;AAC1B,MAAMC,IAAI,GAAG,WAAW;AAMxB,OAAM,MAAOC,kBAAkB;EAI7BC,eAAgB;EAETC,SAAS,CAACC,KAAa;IAC5BC,MAAM,CAACC,YAAY,CAACC,UAAU,CAACR,KAAK,CAAC,CAAC,CAAC;IACvCM,MAAM,CAACC,YAAY,CAACE,OAAO,CAACT,KAAK,EAAEK,KAAK,CAAC;EAC3C;EAEOK,QAAQ,CAACC,IAAI;IAClBL,MAAM,CAACC,YAAY,CAACC,UAAU,CAACP,IAAI,CAAC,CAAC,CAAC;IACtCK,MAAM,CAACC,YAAY,CAACE,OAAO,CAACR,IAAI,EAACW,IAAI,CAACC,SAAS,CAACF,IAAI,CAAC,CAAC,CAAC,CAAE;EAC3D;;EAECG,QAAQ;IACP,OAAOP,YAAY,CAACQ,OAAO,CAACf,KAAK,CAAC,CAAC,CAAE;EACvC;EAEA;EACA,OAAOgB,OAAO;IACZ,OAAOJ,IAAI,CAACK,KAAK,CAACV,YAAY,CAACQ,OAAO,CAACd,IAAI,CAAC,CAAC;EAC/C;EAEA;EACA,OAAOiB,SAAS;IACd,MAAMP,IAAI,GAAG,IAAI,CAACK,OAAO,EAAE;IAC3B,IAAGL,IAAI,IAAE,IAAI,EAAC;MACZ,OAAO,EAAE;;IAEX,OAAOA,IAAI,CAACQ,MAAM;EACpB;EAGA;EACA,OAAOC,WAAW;IAChB,MAAMT,IAAI,GAAG,IAAI,CAACK,OAAO,EAAE;IAC3B,IAAGL,IAAI,IAAE,IAAI,EAAC;MACZ,OAAO,EAAE;;IAEX,OAAOA,IAAI,CAACU,IAAI;EAClB;EAGF;EACE,OAAOC,eAAe;IACpB,IAAG,IAAI,CAACR,QAAQ,KAAK,IAAI,EAAC;MACxB,OAAO,KAAK;;IAEd,MAAMO,IAAI,GAAY,IAAI,CAACD,WAAW,EAAE;IACxC,OAAOC,IAAI,IAAI,OAAO;EACxB;EAGF;EACA,OAAOE,kBAAkB;IACvB,IAAG,IAAI,CAACT,QAAQ,KAAK,IAAI,EAAC;MACxB,OAAO,KAAK;;IAEd,MAAMO,IAAI,GAAY,IAAI,CAACD,WAAW,EAAE;IACxC,OAAOC,IAAI,IAAI,UAAU;EAC3B;EAEA;EAEA,OAAOG,OAAO;IACZlB,MAAM,CAACC,YAAY,CAACC,UAAU,CAACR,KAAK,CAAC;IACrCM,MAAM,CAACC,YAAY,CAACC,UAAU,CAACP,IAAI,CAAC;EAEtC;EAAC;qBAtEYC,kBAAkB;EAAA;EAAA;WAAlBA,kBAAkB;IAAAuB,SAAlBvB,kBAAkB;IAAAwB,YAHjB;EAAM","names":["TOKEN","USER","UserstorageService","constructor","saveToken","token","window","localStorage","removeItem","setItem","saveUser","user","JSON","stringify","getToken","getItem","getUser","parse","getUserId","userId","getUserRole","role","isAdminLoggedIn","isCustomerLoggedIn","signOut","factory","providedIn"],"sourceRoot":"","sources":["/home/denniskali/Desktop/ecommercewebb/src/app/services/auth/storage/userstorage.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nconst TOKEN = 'ecom-token';\nconst USER = 'ecom-user';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class UserstorageService {\n  static getToken: null;\n  \n\n  constructor() { }\n\n  public saveToken(token: string):void{  //accept a token of type string\n    window.localStorage.removeItem(TOKEN); //remove the existing token if there is in local storage\n    window.localStorage.setItem(TOKEN, token);\n  }\n\n  public saveUser(user): void{\n    window.localStorage.removeItem(USER); //remove existing user if they exist\n    window.localStorage.setItem(USER,JSON.stringify(user));  //convert to a string rep that can easily be stored/transmitted over a network\n  }\n\n   getToken(): string{\n    return localStorage.getItem(TOKEN);  //method to get token from local storage and return as string\n  } \n\n  //method to get the user\n  static getUser(): any{\n    return JSON.parse(localStorage.getItem(USER));\n  }\n\n  //method to get the user id\n  static getUserId(): string{\n    const user = this.getUser();\n    if(user==null){\n      return '';\n    }\n    return user.userId;\n  }\n\n\n  //method to get the user role\n  static getUserRole(): string{\n    const user = this.getUser();\n    if(user==null){\n      return '';\n    }\n    return user.role;\n  }\n\n\n//check if logged in user is admin \n  static isAdminLoggedIn(): boolean {\n    if(this.getToken === null){\n      return false;\n    }\n    const role : string = this.getUserRole();\n    return role == 'ADMIN';\n  }\n\n\n//check if logged in user is customer\nstatic isCustomerLoggedIn(): boolean {\n  if(this.getToken === null){\n    return false;\n  }\n  const role : string = this.getUserRole();\n  return role == 'CUSTOMER';\n}\n\n//signout method\n\nstatic signOut(): void{\n  window.localStorage.removeItem(TOKEN);\n  window.localStorage.removeItem(USER);\n\n}\n\n\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}