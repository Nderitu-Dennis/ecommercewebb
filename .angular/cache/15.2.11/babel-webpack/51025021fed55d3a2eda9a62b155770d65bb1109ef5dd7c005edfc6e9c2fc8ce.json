{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { UserstorageService } from 'src/app/services/auth/storage/userstorage.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/services/auth/storage/userstorage.service\";\nconst BASIC_URL = \"http://localhost:8080\";\nexport class CustomerService {\n  constructor(http, userStorageService) {\n    this.http = http;\n    this.userStorageService = userStorageService;\n  }\n  getAllProducts() {\n    return this.http.get(BASIC_URL + '/api/customer/products', {\n      headers: this.createAuthorizationHeader()\n    });\n  }\n  getAllProductsByName(name) {\n    return this.http.get(BASIC_URL + `/api/customer/search/${name}`, {\n      headers: this.createAuthorizationHeader()\n    });\n  }\n  addToCart(productId) {\n    const cartDto = {\n      productId: productId,\n      userId: UserstorageService.getUserId()\n    };\n    return this.http.post(BASIC_URL + '/api/customer/cart', cartDto, {\n      headers: this.createAuthorizationHeader()\n    });\n  }\n  increaseProductQuantity(productId) {\n    const cartDto = {\n      productId: productId,\n      userId: UserstorageService.getUserId()\n    };\n    return this.http.post(BASIC_URL + '/api/customer/addition', cartDto, {\n      headers: this.createAuthorizationHeader()\n    });\n  }\n  decreaseProductQuantity(productId) {\n    const cartDto = {\n      productId: productId,\n      userId: UserstorageService.getUserId()\n    };\n    return this.http.post(BASIC_URL + '/api/customer/deduction', cartDto, {\n      headers: this.createAuthorizationHeader()\n    });\n  }\n  getCartByUserId() {\n    const userId = UserstorageService.getUserId();\n    return this.http.get(BASIC_URL + `/api/customer/cart/${userId}`, {\n      headers: this.createAuthorizationHeader()\n    });\n  }\n  applyCoupon(code) {\n    const userId = UserstorageService.getUserId();\n    return this.http.get(BASIC_URL + `/api/customer/coupon/${userId}/${code}`, {\n      headers: this.createAuthorizationHeader()\n    });\n  }\n  placeOrder(orderDto) {\n    orderDto.userId = UserstorageService.getUserId();\n    return this.http.post(BASIC_URL + '/api/customer/placeOrder', orderDto, {\n      headers: this.createAuthorizationHeader()\n    });\n  }\n  getOrdersByUserId() {\n    const userId = UserstorageService.getUserId();\n    return this.http.get(BASIC_URL + `/api/customer/myOrders/${userId}`, {\n      headers: this.createAuthorizationHeader()\n    });\n  }\n  getOrderedProducts(orderId) {\n    return this.http.get(BASIC_URL + `/api/customer/ordered-products/${orderId}`, {\n      headers: this.createAuthorizationHeader()\n    });\n  }\n  giveReview(reviewDto) {\n    return this.http.post(BASIC_URL + `/api/customer/review`, reviewDto, {\n      headers: this.createAuthorizationHeader()\n    });\n  }\n  createAuthorizationHeader() {\n    const token = this.userStorageService.getToken();\n    // Check if token exists\n    if (token) {\n      return new HttpHeaders().set('Authorization', `Bearer ${token}`);\n    } else {\n      // Handle case where token is missing\n      console.error(\"Token is missing. Unable to create authorization header.\");\n      return new HttpHeaders();\n    }\n  }\n  static #_ = this.ɵfac = function CustomerService_Factory(t) {\n    return new (t || CustomerService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.UserstorageService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CustomerService,\n    factory: CustomerService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"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","names":["HttpHeaders","UserstorageService","BASIC_URL","CustomerService","constructor","http","userStorageService","getAllProducts","get","headers","createAuthorizationHeader","getAllProductsByName","name","addToCart","productId","cartDto","userId","getUserId","post","increaseProductQuantity","decreaseProductQuantity","getCartByUserId","applyCoupon","code","placeOrder","orderDto","getOrdersByUserId","getOrderedProducts","orderId","giveReview","reviewDto","token","getToken","set","console","error","factory","providedIn"],"sourceRoot":"","sources":["/home/denniskali/Desktop/ecommercewebb/src/app/customer/services/customer.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { UserstorageService } from 'src/app/services/auth/storage/userstorage.service';\n\nconst BASIC_URL = \"http://localhost:8080\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CustomerService {\n  \n\n  constructor(private http: HttpClient,\n    private userStorageService: UserstorageService\n    ) { }\n\n  getAllProducts():  Observable<any>{\n    return this.http.get(BASIC_URL + '/api/customer/products',{\n      headers: this.createAuthorizationHeader(),\n    })\n  }\n\n\n  getAllProductsByName(name:any):  Observable<any>{\n    return this.http.get(BASIC_URL + `/api/customer/search/${name}`,{\n      headers: this.createAuthorizationHeader(),\n    })\n  }\n\n\n  addToCart(productId:any): Observable<any>{\n    const cartDto = {\n      productId : productId,\n      userId : UserstorageService.getUserId()\n    }\n    return this.http.post(BASIC_URL + '/api/customer/cart',cartDto,{\n      headers: this.createAuthorizationHeader(),\n    })\n  }\n\n  increaseProductQuantity(productId:any):  Observable<any>{\n    const cartDto = {\n      productId : productId,\n      userId : UserstorageService.getUserId()\n    }\n    return this.http.post(BASIC_URL + '/api/customer/addition',cartDto,{\n      headers: this.createAuthorizationHeader(),\n    })\n  }\n\n\n  decreaseProductQuantity(productId:any):  Observable<any>{\n    const cartDto = {\n      productId : productId,\n      userId : UserstorageService.getUserId()\n    }\n    return this.http.post(BASIC_URL + '/api/customer/deduction',cartDto,{\n      headers: this.createAuthorizationHeader(),\n    })\n  }\n\n\n  getCartByUserId(): Observable<any>{\n   const userId = UserstorageService.getUserId()\n    return this.http.get(BASIC_URL + `/api/customer/cart/${userId}`,{\n      headers: this.createAuthorizationHeader(),\n    })\n  } \n\n  applyCoupon(code: any):  Observable<any>{\n    const userId = UserstorageService.getUserId()\n     return this.http.get(BASIC_URL + `/api/customer/coupon/${userId}/${code}`,{\n       headers: this.createAuthorizationHeader(),\n     })\n   }\n\n   placeOrder(orderDto: any):  Observable<any>{\n    orderDto.userId = UserstorageService.getUserId()\n     return this.http.post(BASIC_URL + '/api/customer/placeOrder',orderDto,{\n       headers: this.createAuthorizationHeader(),\n     })\n   }\n\n  \n\n   getOrdersByUserId():  Observable<any>{\n    const userId = UserstorageService.getUserId()\n     return this.http.get(BASIC_URL + `/api/customer/myOrders/${userId}`,{\n       headers: this.createAuthorizationHeader(),\n     })\n   }\n\n   getOrderedProducts(orderId:number):  Observable<any>{\n     return this.http.get(BASIC_URL + `/api/customer/ordered-products/${orderId}`,{\n       headers: this.createAuthorizationHeader(),\n     })\n   }\n\n   giveReview(reviewDto:any):  Observable<any>{\n    return this.http.post(BASIC_URL + `/api/customer/review`,reviewDto, {\n      headers: this.createAuthorizationHeader(),\n    })\n  }\n\n  private createAuthorizationHeader(): HttpHeaders {\n    const token =this.userStorageService.getToken();\n  \n    // Check if token exists\n    if (token) {\n      return new HttpHeaders().set('Authorization', `Bearer ${token}`);\n    } else {\n      // Handle case where token is missing\n      console.error(\"Token is missing. Unable to create authorization header.\");\n      return new HttpHeaders();\n    }\n  }\n}\n\n\n "]},"metadata":{},"sourceType":"module","externalDependencies":[]}